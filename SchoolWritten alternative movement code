//Muscle code stuff
//This is an alternative solution in case the one I'm doing right now doesn't work

//This is code that will be in the muscle class

if (MovingIn)
{
    //The muscles now needs to apply a force to a node
    ends[0]->ApplyForce(strength,ends[1]);
    ends[1]->ApplyForce(strength,ends[0]);
    
}

else if(MovingOut)
{
    ends[0]->ApplyForce(-strength,ends[1]);
    ends[1]->ApplyForce(-strength,ends[0]);
}
//Don't know if this next piece of code is nesecary to put here
float MuscleSize()
{
    return ends[0]->Location.DistanceTo(ends[1]->Location);
}
//^This goes in the function area not the event tick
//This next thing does go in the event tick though
if(MuscleSize> StartingSize*2 || MuscleSize < StartingSize/2)
{
    MovingIn = !MovingIn;
    MovingOut = !MovingOut;
    MovementProgress  = 5;
}



//^ This should be in the event tick of the muscle and should be called every tick by the creature.






//This is the code that is written on 14/12/2020


//This code should be in the creature event tick
//This is when the muscle is far to big and it brakes which will kill the creature
for (int i = 0; i < Muscles.size(); i++)//Lets just say we have a list of all the mucles might need to do seomthing to get that
{
    if(Muscles[i]->MuscleSize() > (Muscles[i]->StartingDistance * 4))
    {
        //Now destroy the creature
        DestroyCreature(this); // might need a pointer
    }
}


//This should go somewhere and is used to clean up creatures that are killed
void DestroyCreature(Creature* A)
{
    for (int i = 0; i < A->Mucles.size(); i++)
    {
        delete A->Connections[i];
    }
    for (int i = 0; i < A->Nodes.size(); i++)
    {
        delete A->Nodes[i];
    }
    
    delete A;
}








//This code is for the muscle event tick
//What it does is apply a huge force when size of the muscle is under 1 and it's a third of its starting StartingDistance

if(MuscleSize() < 1 && MuscleSize() < (StartingDistance/3) && MuscleSize() != 0) //Must avoid divide by 0s
{
    ends[0]->ApplyForce(Strength*Biases[2] * (1/abs(MuscleSize())), ends[1]);
	ends[1]->ApplyForce(Strength*Biases[3] * (1/abs(MuscleSize())), ends[0]);
	//^ Must use an abs for muscle size because otherwise it would just move between two different points
}


//would probably also be a good idea to somewhat rewrite the creature generation algorithm.
//Right now the creature generation can be weird but I should get everything else working

//Might as well do some random stuff anyway
//This will only be able to generate creatures made of muscle and node
creature* GenerateNewRandom(int seed)
{
    srand(seed);
    Creature* Output = new Creature;
    for (int i = 0; i < rand() % 2 + 2; i++) 
    {   
        Output->Nodes.push_back(new Node);
        
    }
    
    
    int ConnectionLimit = (Output->Nodes.size()(Output->Nodes.size() - 1) / 2 )-1;
    for (int i = 0; i < rand() % ConnectionLimit +1; i++) 
    {
        
    }
    
}






//This code will be for the node class

void ApplyForce(strength,OtherNode)
{
    Position RelativePosition = Position::Normalise(OtherNode->Location);
    LatentVelocity += RelativePosition * strength / weight; //Needs to be done from within the node class.
}

//This code should then be placed in the event tick part of the node class
//The event tick of the nodes must be called after the event tick of the muscles

LatentVelocity += MovementResistance(Area,LatentVelocity)*DeltaTime;
//^ This reduces the amount of movement that is happening
Location += LatentVelocity * DeltaTime;






